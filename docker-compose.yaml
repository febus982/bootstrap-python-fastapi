version: '3.8'
services:

  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - "16686:16686"

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    depends_on:
      - jaeger
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml

  redis:
    image: redis

  celery-worker:
    build:
      dockerfile: Dockerfile
      context: .
      target: celery_app
    environment:
      OTEL_SERVICE_NAME: "bootstrap-fastapi-worker"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
    volumes:
      - '.:/app'
    depends_on:
      - redis
      - otel-collector
    command:
      - opentelemetry-instrument
      - celery
      - -A
      - celery_worker:app
      - worker
      - --beat
      - -l
      - INFO

  dev:
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    environment:
      OTEL_SERVICE_NAME: "bootstrap-fastapi-dev"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
    ports:
      - '8000:8000'
    volumes:
      - '.:/app'
    depends_on:
      - redis
      - celery-worker
    command:
      - opentelemetry-instrument
      - uvicorn
      - http_app:create_app
      - --host
      - 0.0.0.0
      - --port
      - "8000"
      - --factory
      - --reload

  http:
    build:
      dockerfile: Dockerfile
      context: .
      target: http_app
    depends_on:
      - redis
      - celery-worker
      - otel-collector
    environment:
      OTEL_SERVICE_NAME: "bootstrap-fastapi-http"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
    ports:
      - '8001:8000'
    volumes:
      - './sqlite.db:/app/sqlite.db'

  grpc:
    build:
      dockerfile: Dockerfile
      context: .
      target: grpc_app
    depends_on:
      - redis
      - celery-worker
      - otel-collector
    environment:
      OTEL_SERVICE_NAME: "bootstrap-fastapi-grpc"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
    ports:
      - "9999:9999"
    volumes:
      - '.:/app'

  # Starting from here there are only single-run commands, we can use `make` here
  generate-proto:
    build:
      dockerfile: Dockerfile
      context: .
      target: grpc_builder
    volumes:
      - '.:/app'
    command:
      - "make"
      - "generate-proto"

  test:
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    volumes:
      - '.:/app'
    command:
      - "make"
      - "test"

  ci-test:
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    command:
      - "make"
      - "ci-test"
