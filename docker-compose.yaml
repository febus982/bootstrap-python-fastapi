services:
  dev-http: &dev
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    env_file: local.env
    ports:
      - '8000:8000'
    working_dir: "/app/src"
    volumes:
      - '.:/app'
    depends_on:
      - redis
      - otel-collector
    command:
      - python
      - ./http_app/dev_server.py

  dev-socketio:
    <<: *dev
    ports:
      - '8001:8001'
    command:
      - python
      - ./socketio_app/dev_server.py

  otel-http:
    <<: *dev
    environment:
      OTEL_SERVICE_NAME: "bootstrap-fastapi-dev"
    command:
      - opentelemetry-instrument
      - python
      - -m
      - http_app

  otel-socketio:
    <<: *dev
    environment:
      OTEL_SERVICE_NAME: "bootstrap-socketio-dev"
    ports:
      - '8001:8001'
    command:
      - opentelemetry-instrument
      - python
      - -m
      - socketio_app

  #########################
  #### Helper services ####
  #########################

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp" # UDP port for Jaeger agent
      - "16686:16686" # Web UI
      - "14268:14268" # HTTP port for spans

  otel-collector:
    image: grafana/alloy:latest
    depends_on:
      - jaeger
    ports:
      - "12345:12345"
    volumes:
      - ./config.alloy:/etc/alloy/config.alloy
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - --stability.level=experimental
#      - --stability.level=public-preview
      - /etc/alloy/config.alloy

  redis:
    image: redis

  dramatiq-worker:
    <<: *dev
    environment:
      OTEL_SERVICE_NAME: "bootstrap-fastapi-dramatiq-worker"
    ports: []
    command:
      - opentelemetry-instrument
      - dramatiq
      - --watch
      - .
      - -p
      - "1"
      - -t
      - "1"
      - dramatiq_worker

  #################################
  #### Authentication services ####
  #################################

  kratos-migrate:
    image: oryd/kratos:v1.3.1
    environment:
      DSN: "sqlite:///etc/config/kratos/db.sqlite?_fk=true&mode=rwc"
    volumes:
      - ./auth_volumes/kratos:/etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure

  kratos:
    depends_on:
      - kratos-migrate
    image: oryd/kratos:v1.3.1
    # It's not needed to expose these, leaving for documentation
#    ports:
#      - '4433:4433' # public API
#      - '4434:4434' # admin API
    restart: unless-stopped
    environment:
      DSN: "sqlite:///etc/config/kratos/db.sqlite?_fk=true&mode=rwc"
      LOG_LEVEL: "trace"
    volumes:
      - ./auth_volumes/kratos:/etc/config/kratos
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier

  auth-ui:
    image: oryd/kratos-selfservice-ui-node:v1.3.1
    environment:
      PORT: 3000
      # Internal access URL for the BFF instance
      KRATOS_PUBLIC_URL: "http://kratos:4433/"
      # External access URL for the browser
      KRATOS_BROWSER_URL: "http://127.0.0.1:8080/.ory/kratos/public"
      JWKS_URL: "http://oathkeeper:4456/.well-known/jwks.json"
      SECURITY_MODE: "jwks"
      COOKIE_SECRET: "changeme"
      CSRF_COOKIE_NAME: "ory_csrf_ui"
      CSRF_COOKIE_SECRET: "changeme"
    restart: on-failure

#  mailslurper:
#    image: oryd/mailslurper:latest-smtps
#    ports:
#      - '4436:4436'
#      - '4437:4437'

  oathkeeper:
    image: oryd/oathkeeper:v0.40.9
    depends_on:
      - kratos
      - auth-ui
      - dev-http
    ports:
      # Public traffic port
      - "8080:4455"
      # Private traffic port, this is not usually exposed
      # among other things it provides the JWKS url
      # - "4456:4456"
    command:
      serve proxy -c "/etc/config/oathkeeper/oathkeeper.yml"
    restart: on-failure
    volumes:
      - ./auth_volumes/oathkeeper:/etc/config/oathkeeper

  ##########################
  #### One-off commands ####
  ##########################
  test:
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    volumes:
      - '.:/app'
    command:
      - "make"
      - "test"

