version: '3.8'
services:
  redis:
    image: redis

  celery_worker:
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    environment:
      OTEL_SERVICE_NAME: "bootstrap-fastapi"
      OTEL_TRACES_EXPORTER: "none"
      OTEL_METRICS_EXPORTER: "none"
      OTEL_LOGS_EXPORTER: "none"
    volumes:
      - '.:/app'
    depends_on:
      - redis
    command:
      - opentelemetry-instrument
      - celery
      - -A
      - celery_worker:app
      - worker
      - --beat
      - --events
      - -l
      - INFO

  dev:
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    ports:
      - '8000:8000'
    volumes:
      - '.:/app'
    depends_on:
      - redis
      - celery_worker

  http:
    build:
      dockerfile: Dockerfile
      context: .
      target: http_app
    environment:
      OTEL_SERVICE_NAME: "bootstrap-fastapi"
      OTEL_TRACES_EXPORTER: "console"
      OTEL_METRICS_EXPORTER: "console"
      OTEL_LOGS_EXPORTER: "none"
    ports:
      - '8001:8000'
    volumes:
      - './sqlite.db:/app/sqlite.db'

  grpc:
    build:
      dockerfile: Dockerfile
      context: .
      target: grpc_app
    environment:
      OTEL_SERVICE_NAME: "bootstrap-fastapi"
      OTEL_TRACES_EXPORTER: "console"
      OTEL_METRICS_EXPORTER: "console"
      OTEL_LOGS_EXPORTER: "none"
    ports:
      - "9999:9999"
    volumes:
      - '.:/app'

  # Starting from here there are only single-run commands, we can use `make` here
  generate-proto:
    build:
      dockerfile: Dockerfile
      context: .
      target: grpc_builder
    volumes:
      - '.:/app'
    command:
      - "make"
      - "generate-proto"

  test:
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    volumes:
      - '.:/app'
    command:
      - "make"
      - "test"

  ci-test:
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    command:
      - "make"
      - "ci-test"
